datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    username      String?         @unique
    password_hash String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    todos        Todos[]
    dailyReviews DailyReviews[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @unique
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User?   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

// 🎨 스티커 정의
model Stickers {
    id    Int    @id @default(autoincrement())
    label String
    emoji String
    key   String @unique

    dailyReviews DailyReviews[]
}

//  ✅ 투두 리스트
model Todos {
    id        Int      @id @default(autoincrement())
    userId    String
    title     String
    date      DateTime
    status    Status   @default(pending)
    priority  Priority @default(GOOD_TODAY)
    createdAt DateTime @default(now())
    updatedAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 🔘 상태 enum
enum Status {
    pending // 기본값
    success // 성공
    retry //다시
    archive //보관
}

// 우선순위 
enum Priority {
    MUST_TODAY // 오늘 무조건!
    GOOD_TODAY // 오늘이면 좋음
    DONT_FORGET //잊지 말자 !
}

model DailyReviews {
    id          Int      @id @default(autoincrement())
    userId      String
    date        DateTime
    stickerId   Int
    memo        String   @db.Text
    compareNote String?
    createdAt   DateTime @default(now())

    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    sticker Stickers @relation(fields: [stickerId], references: [id], onDelete: Cascade)

    @@unique([userId, date])
}
