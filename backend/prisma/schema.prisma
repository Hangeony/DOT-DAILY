generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?
  username      String?
  password_hash String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account?
  Authenticator Authenticator[]
  dailyReviews  DailyReviews[]
  Session       Session[]
  todos         Todos[]
}

model Account {
  id                       Int      @id @default(autoincrement())
  userId                   Int      @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Stickers {
  id           Int            @id @default(autoincrement())
  label        String
  emoji        String
  key          String         @unique
  dailyReviews DailyReviews[]
}

model Todos {
  id         Int       @id @default(autoincrement())
  userId     Int
  title      String
  date       String
  status     Status    @default(pending)
  priority   Priority  @default(must)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  retryCount Int       @default(0)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyReviews {
  id          Int      @id @default(autoincrement())
  userId      Int
  date        DateTime
  stickerId   Int
  memo        String
  compareNote String?
  createdAt   DateTime @default(now())
  sticker     Stickers @relation(fields: [stickerId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  User                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Session {
  Int          Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  pending
  success
  retry
  archive
}

enum Priority {
  must
  should
  remind
}
